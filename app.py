from flask import Flask, render_template, request, jsonify
from flask_socketio import SocketIO, emit
from threading import Thread
import subprocess
import sys
import os

# Initialize Flask and SocketIO
app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key_here'
socketio = SocketIO(app, cors_allowed_origins="*")

# Global variable for selected character
selected_character = None

def run_bot(character_type):
    """
    Launch the bot in a separate subprocess with the selected character.
    """
    print(f"[BOT LAUNCH] Character: {character_type}")
    subprocess.Popen([sys.executable, "bot_launcher.py", character_type])

@app.route("/", methods=["GET"])
def home():
    """
    Serve the main page with character selection and session controls.
    """
    return render_template("index.html")

@app.route("/start-session", methods=["POST"])
def start_session():
    """
    Handle POST request from frontend to select a character and start bot.
    """
    global selected_character
    data = request.get_json()
    selected_character = data.get("character")

    if selected_character:
        print(f"[INFO] Starting bot with character: {selected_character}", flush=True)
        Thread(target=run_bot, args=(selected_character,)).start()
        return jsonify({
            "status": "success",
            "message": f"Bot started with character: {selected_character}"
        })
    else:
        return jsonify({
            "status": "error",
            "message": "No character selected."
        }), 400

# # Optional WebSocket event handling
# @socketio.on('user_message')
# def handle_user_message(data):
#     """
#     Handle messages sent by the user via WebSocket.
#     """
#     user_text = data.get('message')
#     print(f"[USER] {user_text}")
#     emit('new_message', {'text': user_text, 'sender': 'user'}, broadcast=True)

# @socketio.on('bot_message')
# def handle_bot_message(data):
#     """
#     Handle messages generated by the bot and broadcast to the client.
#     """
#     bot_text = data.get('message')
#     print(f"[BOT] {bot_text}")
#     emit('new_message', {'text': bot_text, 'sender': 'bot'}, broadcast=True)

@socketio.on('new_message')
def relay_message(data):
    print("[SERVER] Relaying message:", data)
    emit('new_message', data, broadcast=True)

@socketio.on('bot_user_roles')
def emit_bot_user_roles(data):
    """
    Emit both bot and user roles to the frontend.
    """
    bot_role = data.get("bot_role")
    user_role = data.get("user_role")
    if bot_role in ["speaker", "listener"] and user_role in ["speaker", "listener"]:
        emit('bot_user_roles', {
            'bot_role': bot_role,
            'user_role': user_role
        }, broadcast=True)


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    socketio.run(app, host="0.0.0.0", port=port)
